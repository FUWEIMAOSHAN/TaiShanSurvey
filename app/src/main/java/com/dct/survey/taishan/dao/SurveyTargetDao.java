package com.dct.survey.taishan.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dct.survey.taishan.bean.SurveyTarget;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SURVEY_TARGET".
*/
public class SurveyTargetDao extends AbstractDao<SurveyTarget, Void> {

    public static final String TABLENAME = "SURVEY_TARGET";

    /**
     * Properties of entity SurveyTarget.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GUID = new Property(0, String.class, "GUID", false, "GUID");
        public final static Property HSITEGUID = new Property(1, String.class, "HSITEGUID", false, "HSITEGUID");
        public final static Property USERGUID = new Property(2, String.class, "USERGUID", false, "USERGUID");
        public final static Property NAME = new Property(3, String.class, "NAME", false, "NAME");
        public final static Property ADDRESS = new Property(4, String.class, "ADDRESS", false, "ADDRESS");
        public final static Property TGTTYPE = new Property(5, String.class, "TGTTYPE", false, "TGTTYPE");
        public final static Property N = new Property(6, String.class, "N", false, "N");
        public final static Property E = new Property(7, String.class, "E", false, "E");
        public final static Property Z = new Property(8, String.class, "Z", false, "Z");
        public final static Property REMARK = new Property(9, String.class, "REMARK", false, "REMARK");
        public final static Property IMAGEURL = new Property(10, String.class, "IMAGEURL", false, "IMAGEURL");
        public final static Property STATE = new Property(11, String.class, "STATE", false, "STATE");
        public final static Property UPDATETIME = new Property(12, String.class, "UPDATETIME", false, "UPDATETIME");
        public final static Property GRADE = new Property(13, String.class, "GRADE", false, "GRADE");
        public final static Property NO = new Property(14, String.class, "NO", false, "NO");
    }


    public SurveyTargetDao(DaoConfig config) {
        super(config);
    }
    
    public SurveyTargetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SURVEY_TARGET\" (" + //
                "\"GUID\" TEXT UNIQUE ," + // 0: GUID
                "\"HSITEGUID\" TEXT UNIQUE ," + // 1: HSITEGUID
                "\"USERGUID\" TEXT UNIQUE ," + // 2: USERGUID
                "\"NAME\" TEXT," + // 3: NAME
                "\"ADDRESS\" TEXT," + // 4: ADDRESS
                "\"TGTTYPE\" TEXT," + // 5: TGTTYPE
                "\"N\" TEXT," + // 6: N
                "\"E\" TEXT," + // 7: E
                "\"Z\" TEXT," + // 8: Z
                "\"REMARK\" TEXT," + // 9: REMARK
                "\"IMAGEURL\" TEXT," + // 10: IMAGEURL
                "\"STATE\" TEXT," + // 11: STATE
                "\"UPDATETIME\" TEXT," + // 12: UPDATETIME
                "\"GRADE\" TEXT," + // 13: GRADE
                "\"NO\" TEXT);"); // 14: NO
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SURVEY_TARGET\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SurveyTarget entity) {
        stmt.clearBindings();
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(1, GUID);
        }
 
        String HSITEGUID = entity.getHSITEGUID();
        if (HSITEGUID != null) {
            stmt.bindString(2, HSITEGUID);
        }
 
        String USERGUID = entity.getUSERGUID();
        if (USERGUID != null) {
            stmt.bindString(3, USERGUID);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(4, NAME);
        }
 
        String ADDRESS = entity.getADDRESS();
        if (ADDRESS != null) {
            stmt.bindString(5, ADDRESS);
        }
 
        String TGTTYPE = entity.getTGTTYPE();
        if (TGTTYPE != null) {
            stmt.bindString(6, TGTTYPE);
        }
 
        String N = entity.getN();
        if (N != null) {
            stmt.bindString(7, N);
        }
 
        String E = entity.getE();
        if (E != null) {
            stmt.bindString(8, E);
        }
 
        String Z = entity.getZ();
        if (Z != null) {
            stmt.bindString(9, Z);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(10, REMARK);
        }
 
        String IMAGEURL = entity.getIMAGEURL();
        if (IMAGEURL != null) {
            stmt.bindString(11, IMAGEURL);
        }
 
        String STATE = entity.getSTATE();
        if (STATE != null) {
            stmt.bindString(12, STATE);
        }
 
        String UPDATETIME = entity.getUPDATETIME();
        if (UPDATETIME != null) {
            stmt.bindString(13, UPDATETIME);
        }
 
        String GRADE = entity.getGRADE();
        if (GRADE != null) {
            stmt.bindString(14, GRADE);
        }
 
        String NO = entity.getNO();
        if (NO != null) {
            stmt.bindString(15, NO);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SurveyTarget entity) {
        stmt.clearBindings();
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(1, GUID);
        }
 
        String HSITEGUID = entity.getHSITEGUID();
        if (HSITEGUID != null) {
            stmt.bindString(2, HSITEGUID);
        }
 
        String USERGUID = entity.getUSERGUID();
        if (USERGUID != null) {
            stmt.bindString(3, USERGUID);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(4, NAME);
        }
 
        String ADDRESS = entity.getADDRESS();
        if (ADDRESS != null) {
            stmt.bindString(5, ADDRESS);
        }
 
        String TGTTYPE = entity.getTGTTYPE();
        if (TGTTYPE != null) {
            stmt.bindString(6, TGTTYPE);
        }
 
        String N = entity.getN();
        if (N != null) {
            stmt.bindString(7, N);
        }
 
        String E = entity.getE();
        if (E != null) {
            stmt.bindString(8, E);
        }
 
        String Z = entity.getZ();
        if (Z != null) {
            stmt.bindString(9, Z);
        }
 
        String REMARK = entity.getREMARK();
        if (REMARK != null) {
            stmt.bindString(10, REMARK);
        }
 
        String IMAGEURL = entity.getIMAGEURL();
        if (IMAGEURL != null) {
            stmt.bindString(11, IMAGEURL);
        }
 
        String STATE = entity.getSTATE();
        if (STATE != null) {
            stmt.bindString(12, STATE);
        }
 
        String UPDATETIME = entity.getUPDATETIME();
        if (UPDATETIME != null) {
            stmt.bindString(13, UPDATETIME);
        }
 
        String GRADE = entity.getGRADE();
        if (GRADE != null) {
            stmt.bindString(14, GRADE);
        }
 
        String NO = entity.getNO();
        if (NO != null) {
            stmt.bindString(15, NO);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SurveyTarget readEntity(Cursor cursor, int offset) {
        SurveyTarget entity = new SurveyTarget( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // GUID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // HSITEGUID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // USERGUID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NAME
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ADDRESS
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // TGTTYPE
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // N
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // E
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // Z
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // REMARK
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // IMAGEURL
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // STATE
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // UPDATETIME
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // GRADE
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // NO
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SurveyTarget entity, int offset) {
        entity.setGUID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setHSITEGUID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUSERGUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNAME(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setADDRESS(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTGTTYPE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setN(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setE(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setZ(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setREMARK(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIMAGEURL(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSTATE(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUPDATETIME(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGRADE(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNO(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SurveyTarget entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SurveyTarget entity) {
        return null;
    }

    @Override
    public boolean hasKey(SurveyTarget entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
