package com.dct.survey.taishan.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dct.survey.taishan.bean.Dictionary;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DICTIONARY".
*/
public class DictionaryDao extends AbstractDao<Dictionary, Long> {

    public static final String TABLENAME = "DICTIONARY";

    /**
     * Properties of entity Dictionary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CODE = new Property(1, String.class, "CODE", false, "CODE");
        public final static Property DESCRIPTION = new Property(2, String.class, "DESCRIPTION", false, "DESCRIPTION");
        public final static Property FROWINDEX = new Property(3, int.class, "FROWINDEX", false, "FROWINDEX");
        public final static Property KEYNAME = new Property(4, String.class, "KEYNAME", false, "KEYNAME");
        public final static Property KEYVALUE = new Property(5, String.class, "KEYVALUE", false, "KEYVALUE");
        public final static Property NAME = new Property(6, String.class, "NAME", false, "NAME");
    }


    public DictionaryDao(DaoConfig config) {
        super(config);
    }
    
    public DictionaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DICTIONARY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CODE\" TEXT," + // 1: CODE
                "\"DESCRIPTION\" TEXT," + // 2: DESCRIPTION
                "\"FROWINDEX\" INTEGER NOT NULL ," + // 3: FROWINDEX
                "\"KEYNAME\" TEXT," + // 4: KEYNAME
                "\"KEYVALUE\" TEXT," + // 5: KEYVALUE
                "\"NAME\" TEXT);"); // 6: NAME
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DICTIONARY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dictionary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CODE = entity.getCODE();
        if (CODE != null) {
            stmt.bindString(2, CODE);
        }
 
        String DESCRIPTION = entity.getDESCRIPTION();
        if (DESCRIPTION != null) {
            stmt.bindString(3, DESCRIPTION);
        }
        stmt.bindLong(4, entity.getFROWINDEX());
 
        String KEYNAME = entity.getKEYNAME();
        if (KEYNAME != null) {
            stmt.bindString(5, KEYNAME);
        }
 
        String KEYVALUE = entity.getKEYVALUE();
        if (KEYVALUE != null) {
            stmt.bindString(6, KEYVALUE);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(7, NAME);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dictionary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String CODE = entity.getCODE();
        if (CODE != null) {
            stmt.bindString(2, CODE);
        }
 
        String DESCRIPTION = entity.getDESCRIPTION();
        if (DESCRIPTION != null) {
            stmt.bindString(3, DESCRIPTION);
        }
        stmt.bindLong(4, entity.getFROWINDEX());
 
        String KEYNAME = entity.getKEYNAME();
        if (KEYNAME != null) {
            stmt.bindString(5, KEYNAME);
        }
 
        String KEYVALUE = entity.getKEYVALUE();
        if (KEYVALUE != null) {
            stmt.bindString(6, KEYVALUE);
        }
 
        String NAME = entity.getNAME();
        if (NAME != null) {
            stmt.bindString(7, NAME);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Dictionary readEntity(Cursor cursor, int offset) {
        Dictionary entity = new Dictionary( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CODE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DESCRIPTION
            cursor.getInt(offset + 3), // FROWINDEX
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // KEYNAME
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // KEYVALUE
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // NAME
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dictionary entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCODE(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDESCRIPTION(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFROWINDEX(cursor.getInt(offset + 3));
        entity.setKEYNAME(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setKEYVALUE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNAME(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Dictionary entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Dictionary entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Dictionary entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
